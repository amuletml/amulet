functor : (type -> type) -> constraint
map : {'f : type -> type}. functor 'f => {'a : type}. {'b : type}. ('a -> 'b) -> 'f 'a -> 'f 'b
map_nested : {'f : type -> type}. {'g : type -> type}. {'a : type}. {'b : type}. (functor 'f * functor 'g) => ('a -> 'b) -> 'f ('g 'a) -> 'f ('g 'b)
