print : string -> unit
repr : type -> type
Unit : Infer{'ce : type}. Spec{'a : 'ce}. ('a ~ unit) ⊃ repr 'a
Pair : Infer{'df : type}. Spec{'a : 'df}. Spec{'a : type}. Spec{'b : type}. ('a ~ 'a * 'b) ⊃ (repr 'a * repr 'b) -> repr 'a
Int : Infer{'ee : type}. Spec{'a : 'ee}. ('a ~ int) ⊃ repr 'a
option : type -> type
Some : Spec{'a : type}. 'a -> option 'a
None : Spec{'a : type}. option 'a
<$> : Infer{'a : type}. Infer{'b : type}. ('b -> 'a) -> option 'b -> option 'a
<*> : Infer{'a : type}. Infer{'b : type}. option ('b -> 'a) -> option 'b -> option 'a
cast : Spec{'a : type}. Spec{'b : type}. repr 'a -> repr 'b -> 'a -> option 'b
main : unit
