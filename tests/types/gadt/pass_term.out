list : type -> type
Nil : {'tys : 'bl}. ('tys ~ unit) ⊃ list 'tys
Cons : {'tys : 'ck}. {'a : type}. {'b : type}. ('tys ~ 'a * 'b) ⊃ ('a * list 'b) -> list 'tys
elem : {'a : type}. 'a -> 'a -> type
Here : {'xs : 'ff}. {'x : 'ff}. {'xs : 'ff}. ('xs ~ 'x * 'xs) ⊃ elem 'x 'xs
There : {'xs : 'gq}. {'x : 'gq}. {'xs : 'gq}. {'y : 'gq}. ('xs ~ 'y * 'xs) ⊃ elem 'x 'xs -> elem 'x 'xs
term : type -> type -> type
Var : {'ctx : type}. {'ty : type}. elem 'ty 'ctx -> term 'ctx 'ty
Lam : {'ty : 'mf}. {'a : type}. {'b : type}. {'ctx : type}. ('ty ~ 'a -> 'b) ⊃ term ('a * 'ctx) 'b -> term 'ctx 'ty
App : {'ty : 'od}. {'a : type}. {'b : type}. {'ctx : type}. ('ty ~ 'b) ⊃ (term 'ctx ('a -> 'b) * term 'ctx 'a) -> term 'ctx 'ty
const : {'a : type}. {'ctx : type}. {'b : type}. term 'ctx ('a -> 'b -> 'a)
