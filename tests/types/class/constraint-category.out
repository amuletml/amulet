dict : constraint -> type
Dict : Spec{'c : constraint}. 'c => dict 'c
:- : constraint -> constraint -> type
Sub : Spec{'p : constraint}. Spec{'q : constraint}. ('p => unit -> dict 'q) -> :- 'p 'q
weaken1 : Spec{'a : constraint}. Spec{'b : constraint}. :- ('a * 'b) 'a
weaken2 : Spec{'a : constraint}. Spec{'b : constraint}. :- ('a * 'b) 'b
contract : Spec{'a : constraint}. :- 'a ('a * 'a)
ignore : Spec{'a : constraint}. :- ('a * 'a) 'a
swap : Spec{'a : constraint}. Spec{'b : constraint}. :- ('a * 'b) ('b * 'a)
strengthen : Spec{'b : constraint}. Spec{'a : constraint}. Spec{'c : constraint}. dict 'b -> :- 'a 'c -> :- 'a ('b * 'c)
strengthen2 : Spec{'b : constraint}. Spec{'a : constraint}. Spec{'c : constraint}. dict 'b -> :- 'a 'c -> :- 'a ('c * 'b)
id : Spec{'a : constraint}. :- 'a 'a
trans : Spec{'a : constraint}. Spec{'b : constraint}. Spec{'c : constraint}. :- 'a 'b -> :- 'b 'c -> :- 'a 'c
c : type -> constraint
c_takes_type : Spec{'a : type}. c 'a => 'a
d : type -> constraint
superclass : Spec{'a : type}. :- (d 'a) (c 'a)
impossible : constraint
no : impossible => Spec{'a : type}. 'a
trivial : constraint
initial : Spec{'a : constraint}. :- impossible 'a
terminal : Spec{'a : constraint}. :- 'a trivial
map_dict : Spec{'a : constraint}. Spec{'b : constraint}. :- 'a 'b -> dict 'a -> dict 'b
unmap_dict : Spec{'a : constraint}. Spec{'b : constraint}. (dict 'a -> dict 'b) -> :- 'a 'b
:~: : Infer{'a : type}. 'a -> 'a -> type
Refl : Infer{'bmk : type}. Infer{'a : type}. Spec{'b : 'bmk}. Spec{'a : 'a}. ('b ~ 'a) âŠƒ :~: 'a 'b
eq_dict : Infer{'a : type}. Spec{'b : 'a}. Spec{'c : 'a}. :~: 'b 'c -> dict (~ 'b 'c)
dict_eq : Infer{'a : type}. Spec{'b : 'a}. Spec{'c : 'a}. dict (~ 'b 'c) -> :~: 'b 'c
