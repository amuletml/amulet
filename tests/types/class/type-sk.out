k0 : type
s0 : type
app : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
lit : Infer{'a : type}. 'a -> type
x0 : type
y0 : type
z0 : type
x : type
y : type
z : type
stop : type
more : type
combine : Infer{'gt : type}. Infer{'gu : type}. Infer{'gv : type}. Req{'d1 : 'gv}. Req{'d2 : 'gu}. Req{'d : 'gt}. constraint
eval1 : Infer{'ow : type}. Infer{'ox : type}. Infer{'oy : type}. Req{'x : 'oy}. Req{'y : 'ox}. Req{'d : 'ow}. constraint
evalaux : Infer{'cgj : type}. Infer{'cgk : type}. Infer{'cgl : type}. Req{'x : 'cgl}. Req{'y : 'cgk}. Req{'q1 : 'cgj}. constraint
eval : Infer{'cob : type}. Infer{'coc : type}. Req{'x : 'coc}. Req{'y : 'cob}. constraint
eval : Spec{'x : type}. Spec{'y : type}. eval 'x 'y => 'x -> 'y
bot : Spec{'a : type}. 'a
kk0 : type
ks0 : type
z : type
succ0 : type
foldn : Infer{'b : type}. 'b -> type
succ : Infer{'a : type}. 'a -> type
one : type
two : type
three : type
plus0 : type
plus : Infer{'a : type}. Infer{'b : type}. 'b -> 'a -> type
x0 : app (lit x0) (app (lit x0) (app (lit x0) (app (lit x0) (lit y0))))
