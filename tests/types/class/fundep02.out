nat : type
Z : nat
S : nat -> nat
snat : nat -> type
SZ : Infer{'dh : type}. Spec{'n : 'dh}. ('n ~ Z) ⊃ snat 'n
SS : Infer{'ei : type}. Spec{'n : 'ei}. Spec{'n : nat}. ('n ~ S 'n) ⊃ snat 'n -> snat 'n
add_ev : nat -> nat -> nat -> type
AddZ : Infer{'ht : type}. Infer{'hu : type}. Infer{'hv : type}. Spec{'a : 'ht}. Spec{'b : 'hu}. Spec{'c : 'hv}. Infer{'a : nat}. ('a ~ Z, 'b ~ 'a, 'c ~ 'a) ⊃ add_ev 'a 'b 'c
AddS : Infer{'jr : type}. Infer{'js : type}. Spec{'a : 'jr}. Spec{'c : 'js}. Spec{'a : nat}. Spec{'b : nat}. Spec{'c : nat}. ('a ~ S 'a, 'c ~ S 'c) ⊃ add_ev 'a 'b 'c -> add_ev 'a 'b 'c
add : Req{'a : nat}. Req{'b : nat}. Req{'c : nat}. constraint
ev : Spec{'a : nat}. Spec{'b : nat}. Spec{'c : nat}. add 'a 'b 'c => add_ev 'a 'b 'c
vect : nat -> type -> type
Nil : Infer{'yw : type}. Spec{'n : 'yw}. Spec{'a : type}. ('n ~ Z) ⊃ vect 'n 'a
Cons : Infer{'aai : type}. Spec{'n : 'aai}. Spec{'a : type}. Spec{'n : nat}. ('n ~ S 'n) ⊃ ('a * vect 'n 'a) -> vect 'n 'a
append_with : Spec{'k : nat}. Spec{'l : nat}. Spec{'n : nat}. Spec{'a : type}. add_ev 'n 'k 'l -> vect 'n 'a -> vect 'k 'a -> vect 'l 'a
append : Infer{'k : nat}. Infer{'l : nat}. Infer{'n : nat}. Infer{'a : type}. add 'n 'k 'l => vect 'n 'a -> vect 'k 'a -> vect 'l 'a
:: : Infer{'a : type}. Infer{'n : nat}. 'a -> vect 'n 'a -> vect (S 'n) 'a
onetofive : vect (S (S (S (S (S Z))))) int
