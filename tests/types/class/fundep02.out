nat : type
Z : nat
S : nat -> nat
snat : nat -> type
SZ : Infer{'cr : type}. Spec{'n : 'cr}. ('n ~ Z) ⊃ snat 'n
SS : Infer{'do : type}. Spec{'n : 'do}. Spec{'n : nat}. ('n ~ S 'n) ⊃ snat 'n -> snat 'n
add_ev : nat -> nat -> nat -> type
AddZ : Infer{'gr : type}. Infer{'gs : type}. Infer{'gt : type}. Spec{'a : 'gr}. Spec{'b : 'gs}. Spec{'c : 'gt}. Infer{'a : nat}. ('a ~ Z, 'b ~ 'a, 'c ~ 'a) ⊃ add_ev 'a 'b 'c
AddS : Infer{'il : type}. Infer{'im : type}. Spec{'a : 'il}. Spec{'c : 'im}. Spec{'a : nat}. Spec{'b : nat}. Spec{'c : nat}. ('a ~ S 'a, 'c ~ S 'c) ⊃ add_ev 'a 'b 'c -> add_ev 'a 'b 'c
add : nat -> nat -> nat -> constraint
ev : Spec{'a : nat}. Spec{'b : nat}. Spec{'c : nat}. add 'a 'b 'c => add_ev 'a 'b 'c
vect : nat -> type -> type
Nil : Infer{'wa : type}. Spec{'n : 'wa}. Spec{'a : type}. ('n ~ Z) ⊃ vect 'n 'a
Cons : Infer{'xi : type}. Spec{'n : 'xi}. Spec{'a : type}. Spec{'n : nat}. ('n ~ S 'n) ⊃ ('a * vect 'n 'a) -> vect 'n 'a
append_with : Spec{'k : nat}. Spec{'l : nat}. Spec{'n : nat}. Spec{'a : type}. add_ev 'n 'k 'l -> vect 'n 'a -> vect 'k 'a -> vect 'l 'a
append : Infer{'k : nat}. Infer{'l : nat}. Infer{'n : nat}. Infer{'a : type}. add 'n 'k 'l => vect 'n 'a -> vect 'k 'a -> vect 'l 'a
:: : Infer{'a : type}. Infer{'n : nat}. 'a -> vect 'n 'a -> vect (S 'n) 'a
onetofive : vect (S (S (S (S (S Z))))) int
