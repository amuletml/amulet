id : type -> type
Id : Spec{'a : type}. 'a -> id 'a
const : Infer{'a : type}. type -> 'a -> type
Const : Spec{'a : type}. Spec{'b : 'a}. 'a -> const 'a 'b
:+: : Infer{'a : type}. ('a -> type) -> ('a -> type) -> 'a -> type
L : Spec{'f : 'a -> type}. Spec{'g : 'a -> type}. Spec{'a : 'a}. 'f 'a -> :+: 'f 'g 'a
R : Spec{'f : 'a -> type}. Spec{'g : 'a -> type}. Spec{'a : 'a}. 'g 'a -> :+: 'f 'g 'a
:*: : Infer{'a : type}. ('a -> type) -> ('a -> type) -> 'a -> type
P : Spec{'f : 'a -> type}. Spec{'g : 'a -> type}. Spec{'a : 'a}. ('f 'a * 'g 'a) -> :*: 'f 'g 'a
fix : (type -> type) -> type
Fix : Spec{'f : type -> type}. 'f (fix 'f) -> fix 'f
functor : Req{'f : type -> type}. constraint
<$> : Spec{'f : type -> type}. functor 'f => Spec{'a : type}. Spec{'b : type}. ('a -> 'b) -> 'f 'a -> 'f 'b
recursive : Req{'t : type}. constraint
rep : Req{'t : type}. type -> type
from : Spec{'t : type}. recursive 't => fix (rep 't) -> 't
into : Spec{'t : type}. recursive 't => 't -> fix (rep 't)
unfix : Infer{'f : type -> type}. fix 'f -> 'f (fix 'f)
cata : Infer{'a : type}. Infer{'b : type}. recursive 'a => (rep 'a 'b -> 'b) -> 'a -> 'b
