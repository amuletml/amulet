&& : bool -> bool -> bool
eq : type -> constraint
=.= : Spec{'a : type}. eq 'a => 'a -> 'a -> bool
id : type -> type
Id : Spec{'a : type}. 'a -> id 'a
option : type -> type
Some : Spec{'a : type}. 'a -> option 'a
None : Spec{'a : type}. option 'a
rose : (type -> type) -> type -> type
Branch : Spec{'f : type -> type}. Spec{'a : type}. ('a * 'f (rose 'f 'a)) -> rose 'f 'a
