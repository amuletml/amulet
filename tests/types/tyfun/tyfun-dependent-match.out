nat : type
Z : nat
S : nat -> nat
vect : nat -> type -> type
Nil : Infer{'ds : type}. Spec{'n : 'ds}. Spec{'a : type}. ('n ~ Z) ⊃ vect 'n 'a
Cons : Infer{'fe : type}. Spec{'n : 'fe}. Spec{'a : type}. Spec{'k : nat}. ('n ~ S 'k) ⊃ ('a * vect 'k 'a) -> vect 'n 'a
snat : nat -> type
SZ : Infer{'hm : type}. Spec{'n : 'hm}. ('n ~ Z) ⊃ snat 'n
SS : Infer{'in : type}. Spec{'n : 'in}. Spec{'s : nat}. ('n ~ S 's) ⊃ snat 's -> snat 'n
replicate : Spec{'n : nat}. Spec{'a : type}. snat 'n -> 'a -> vect 'n 'a
map : Spec{'a : type}. Spec{'b : type}. Spec{'n : nat}. ('a -> 'b) -> vect 'n 'a -> vect 'n 'b
replicate : Spec{'k : type}. Req{'n : nat}. Req{'a : 'k}. vect 'n 'k
map : Spec{'a : type}. Spec{'b : type}. Spec{'n : nat}. Req{'f : 'a -> 'b}. Req{'xs : vect 'n 'a}. vect 'n 'b
