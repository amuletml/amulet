tostring : {'a : type}. 'a -> string
print : string -> unit
identity : type -> type
Identity : {'a : type}. 'a -> identity 'a
runIdentity : {'cf : type}. identity 'cf -> 'cf
const : {'cx : type}. type -> 'cx -> type
Const : {'a : type}. {'b : 'dk}. 'a -> const 'a 'b
getConst : {'du : type}. {'b : 'ei}. const 'du 'b -> 'du
functor : (type -> type) -> type
Functor : {'f : type -> type}. ({'a : type}. {'b : type}. ('a -> 'b) -> 'f 'a -> 'f 'b) -> functor 'f
functor_identity : functor identity
functor_const : {'a : type}. functor (const 'a)
& : {'iz : type}. {'ja : type}. {'jn : type}. ('jn -> 'ja) -> ('iz -> 'jn) -> 'iz -> 'ja
|> : {'kh : type}. {'kj : type}. 'kh -> ('kh -> 'kj) -> 'kj
<$> : {'f : type -> type}. {'a : type}. {'b : type}. functor 'f => ('a -> 'b) -> 'f 'a -> 'f 'b
fst : {'ni : type}. {'f : type -> type}. {'a : type}. {'no : type}. functor 'f => ('no -> 'f 'a) -> ('no * 'ni) -> 'f ('a * 'ni)
snd : {'ph : type}. {'f : type -> type}. {'a : type}. {'po : type}. functor 'f => ('po -> 'f 'a) -> ('ph * 'po) -> 'f ('ph * 'a)
.~ : {'qs : type}. {'iz : type}. {'ja : type}. {'rp : type}. (('rp -> identity 'qs) -> 'iz -> identity 'ja) -> 'qs -> 'iz -> 'ja
^. : {'sp : type}. {'sr : type}. {'b : 'tu}. {'a : type}. {'b : 'tw}. 'sp -> (('a -> const 'a 'b) -> 'sp -> const 'sr 'b) -> 'sr
print_pair : {'a : type}. {'a : type}. ('a * 'a) -> unit
main : unit
